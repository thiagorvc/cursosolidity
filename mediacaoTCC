//NORSK HYDRO _ SMARTCONTRACTS - MEDIAÇÃO - TURN-KEY CONTRACTS.
//VICE-PRESIDÊNCIA JURÍDICA E COMPLIANCE

pragma solidity >=0.4.22 <0.7.0;

contract Mediacao {
    
    address payable Empresa01;
    address payable Empresa02;
    address payable mediador;
    string  ObjetodaDisputa;
    uint256 ValorDisputa;
    uint256 HonorariosMediador;
    uint256 dataInicioMediacao;
    uint256 dataFimMediacao;
    uint256 dataAcordo;
    
    // Estagios da Mediação
    
    enum State { Created,Premediation,End}
    State public state;

    // Eventos da Mediação
    
    event Creation();
    event MediationStarts();
    event MediacaoComAcordo();
    event MediacaoSemAcordo();
    
    // Forma de Registro das Partes
    
    struct PartiesReg {
        string _nome;
        string _email;
        uint _telefone;
        uint _id;
        address _wallet;
    }
    
    //constructor
    
        constructor(
        uint256 _HonorariosMediador
        ) public payable
        {
        mediador = msg.sender;
        HonorariosMediador = _HonorariosMediador;
        emit Creation();
        state = State.Created;
    }
    
    // Informações Gerais_Honorarios Mediador
    
    function mediationBalance() public view returns (uint) {
        return address(this).balance;
    }
    
    function showHonorariosMediador() public view returns (uint) {
        return HonorariosMediador;
    }
    
    function showValorDisputa() public view returns (uint) {
        return ValorDisputa;
    }
    
    //Chamamento das Partes
    
    function callForMediation(
        uint256 _ValorDisputa,
        string memory ObjetodaDisputa, 
        string memory _nome, 
        string memory _email, 
        uint _Telefone, 
        uint _id, 
        address _wallet
        )
        inState(State.Created)
        condition(msg.value = (_ValorDisputa+(HonorariosMediador/2)))
        public
        payable
        {
        Empresa01 = msg.sender;
        ValorDisputa = _ValorDisputa;
        Parties[partyCount] = PartiesReg ( _nome, _email, _Telefone, _id, _wallet);
        dateOfCall = now;
        dataFimConvite = now + 432000;
        emit Invite();
        state = State.Premediation;
    }
    
    // Outra Parte Aceita a Abertura da Mediação
    
    function acceptMediation(
        string memory _nome, 
        string memory _email, 
        uint _Telefone, 
        uint _id, 
        address _wallet
        )
        inState(State.Premediation)
        condition(msg.value == (ValorDisputa+(HonorariosMediador/2)))
        public
        payable
        {
        Empresa02 = msg.sender;
        dataInicioMediacao = now;
        dataFimMediacao = now + 432000;
        parties[partyCount] = PartiesReg ( _nome, _email, _Telefone, _id, _wallet);
        emit MediationStarts();
        state = State.Premediation;
        mediador.transfer(HonorariosMediador);
    }
    
        // Mediaçao finaliza com Acordo
    
    function agreementForParty01()
        inState(State.End)
        onlyMediator
        public
        payable
        {
        dataAcordo = now;
        dataFimMediacao = now;
        emit MediacaoComAcordo();
        state = State.End;
        Empresa01.transfer(address(this).balance);
    }
    
    
        function agreementForParty02()
        inState(State.End)
        onlyMediator
        public
        payable
        {
        dataAcordo = now;
        dataFimMediacao = now;
        emit MediacaoComAcordo();
        state = State.End;
        Empresa02.transfer(address(this).balance);
    }
    
    // Mediação finaliza sem Acordo
    
    function finishMediacaoSemAcordo();
        inState(State.End)
        onlyMediator
        public
        payable
        {
        dataAcordo = now;
        emit MediacaoSemAcordo();
        state = State.End;
        Empresa01.transfer(address(this).balance/2);
        Empresa02.transfer(address(this).balance/2);
    }
    
} 
